appoint_shieldmaiden_interaction = {
    category = interaction_category_vassal

    #ai_targets = {
	#	ai_recipients = courtiers
	#}
	#ai_frequency = 180

    is_shown = {
		scope:actor = {
            is_ruler = yes
			is_physically_able_adult = yes
			has_culture_group = culture_group:north_germanic_group
            religion = religion:germanic_religion
            OR = {
                is_ai = no
                highest_held_title_tier >= tier_county
            }
        }

        scope:recipient = {
			NOT = { this = scope:actor }
			NOT = { has_trait = incapable }
			is_courtier_of = scope:actor
            NOT = {  has_trait = shieldmaiden }

            is_female = yes

            OR = { 
                has_trait = brave
                has_trait = ambitious
                has_trait = diligent
                has_trait = just
                has_trait = blademaster_1
                has_trait = blademaster_2
                has_trait = blademaster_3
                has_trait = hunter_1
                has_trait = hunter_2
                has_trait = hunter_3
                has_trait = gallant
                has_trait = varangian
                has_trait = berserker
                has_trait = strong
                has_trait = athletic
                has_trait = education_martial_prowess_1
                has_trait = education_martial_prowess_2
                has_trait = education_martial_prowess_3
                has_trait = education_martial_prowess_4
                has_trait = education_martial_1
                has_trait = education_martial_2
                has_trait = education_martial_3
                has_trait = education_martial_4
            }
        }
    }

    is_valid_showing_failures_only = {
        scope:recipient = {
			prowess >= decent_skill_rating
			is_adult = yes
			is_imprisoned = no
		}
    }

    greeting = positive
    notification_text = OFFER_SHIELDMAIDEN_APPOINTMENT_NOTIFICATION

    on_accept = {
        scope:actor = {
            trigger_event = char_interaction.6121
            
            add_prestige = appoint_shieldmaiden_prestige_gain

			stress_impact = {
				arrogant = medium_stress_impact_gain
				paranoid = minor_stress_impact_gain
			}
        }

        scope:recipient = {
            if = {
                add_trait = shieldmaiden

                add_prestige = appoint_shieldmaiden_prestige_gain

                add_opinion = {
                    target = scope:actor
                    modifier = appointed_shieldmaiden_opinion
                }
            }
			if = {
				limit = {
					has_opinion_modifier = {
						target = scope:actor
						modifier = relieved_shieldmaiden_opinion
					}
				}

				remove_opinion = {
                    target = scope:actor
                    modifier = relieved_shieldmaiden_opinion
                }
			}
        }
    }

	auto_accept = {
		custom_description = {
			text = "spending_hook"
			subject = scope:actor
			object = scope:recipient
			AND = {
				always = scope:hook
				scope:actor = { has_strong_hook = scope:recipient }
			}
		}
	}

	send_option = {
		is_valid = {
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = hook
		localization = SCHEME_HOOK
	}
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"
	
	send_options_exclusive = no

	cost = { gold = appoint_shieldmaiden_cost }

    on_decline = {
		scope:actor = {
			trigger_event = char_interaction.6122
		}
	}

	#ai_potential = {
	#	religion = religion:germanic_religion
	#	has_culture_group = culture_group:north_germanic_group
	#	prestige > major_prestige_value
	#	is_physically_able_adult = yes
	#}

	#auto_accept = no

	ai_min_reply_days = 2
	ai_max_reply_days = 7

	ai_accept = {
		base = 0

		modifier = {
			trigger = {
				always = scope:hook
			}
			add = 100
			desc = SCHEME_WEAK_HOOK_USED
		}

		modifier = {
			trigger = {
				has_education_martial_trigger = yes
			}
			add = 20
			desc = INTERACTION_MARTIAL_EDUCATION
		}
		
		# Weight up for personality values.
		ai_value_modifier = {
			who = scope:recipient
			ai_boldness = {
				if = {
					limit = {
						scope:recipient = {
							NOT = { ai_boldness = 0 }
						}
					}
					value = 0.5
				}
			}
			ai_compassion = {
				if = {
					limit = {
						scope:recipient = {
							NOT = { ai_compassion = 0 }
						}
					}
					value = -0.5
				}
			}
		}
		
		modifier = {
			add = -1000
			has_trait = craven
			desc = INTERACTION_CRAVEN
		}
		
		modifier = {
			add = -50
			has_trait = content
			desc = INTERACTION_CONTENT
		}
		
		modifier = {
			add = -50
			has_trait = humble
			desc = INTERACTION_HUMBLE
		}
		
		modifier = {
			add = -50
			has_trait = lazy
			desc = INTERACTION_LAZY
		}
		
		modifier = {
			add = 100
			has_trait = brave
			desc = INTERACTION_BRAVE
		}
		
		modifier = {
			add = 25
			has_trait = ambitious
			desc = INTERACTION_AMBITIOUS
		}
	}
	
	#ai_will_do = {
	#	base = 100
	#}
}
