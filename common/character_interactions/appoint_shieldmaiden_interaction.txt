appoint_shieldmaiden_interaction = {
    category = interaction_category_vassal

    # maybe AIs a bit later

    is_shown = {
        scope:recipient = {
            NOT = { 
                this = scope:actor
                # Can't be a shieldmaiden again
                has_trait = shieldmaiden
            }

            is_female = yes
            is_adult = yes

            OR = { 
                has_trait = brave
                has_trait = ambitious
                has_trait = diligent
                has_trait = just
                has_trait = blademaster_1
                has_trait = blademaster_2
                has_trait = blademaster_3
                has_trait = hunter_1
                has_trait = hunter_2
                has_trait = hunter_3
                has_trait = gallant
                has_trait = varangian
                has_trait = berserker
                has_trait = strong
                has_trait = athletic
                has_trait = education_martial_prowess_1
                has_trait = education_martial_prowess_2
                has_trait = education_martial_prowess_3
                has_trait = education_martial_prowess_4
                has_trait = education_martial_1
                has_trait = education_martial_2
                has_trait = education_martial_3
                has_trait = education_martial_4
            }
            
            # Anyone can be a shieldmaiden if they are in the culture
            # has_culture_group = culture_group:north_germanic_group

            is_courtier_of = scope:actor
        }

        scope:actor = {
            is_ruler = yes
            OR = {
                is_ai = no
                highest_held_title_tier >= tier_county
            }

            has_culture_group = culture_group:north_germanic_group
            faith.religion = religion:germanic_religion
        }
    }

    is_valid_showing_failures_only = {
        NOT = {
            scope:recipient = {
                is_imprisoned = yes
            }
        }

        # Needs enough prowess
        scope:recipient = {
            custom_description = {
                text = not_enough_prowess
                prowess > 9
            }
        }

        # Can't be incapable
        NOT = {
            scope:recipient = {
                has_trait = incapable
            }
        }

        # Can't be inbred
        NOT = {
            scope:recipient = {
                has_trait = inbred
            }
        }
    }

    greeting = positive
    notification_text = OFFER_SHIELDMAIDEN_APPOINTMENT_NOTIFICATION

    ai_min_reply_days = 2
	ai_max_reply_days = 7

    ai_accept = {
        base = 20
        #MAIN
		#Heretic/Infidel modifier.

		#MINOR
		#Rivalry modifier.
		#Same Dynasty modifier.
		#Cultural/Cultural Group modifiers.

		#OPINION SCALES
		#Dread
		#Compare Opinion modifier.

        #PERKS
        modifier = { # Perk boost
			desc = offer_vassalization_true_ruler_perk_tt
			trigger = {
				scope:actor = { has_perk = true_ruler_perk }
			}
			add = true_ruler_value
		}

        #MAIN
		modifier = { #Different faith, no pluralism.
			desc = offer_vassalization_interaction_aibehavior_differentfaith_tt
			trigger = {
				scope:recipient = {
					NOR = { #Of two different faiths AND the potential vassal's faith is not pluralistic.
						faith = scope:actor.faith
						faith = { has_doctrine = doctrine_pluralism_pluralistic }
					}
				}
			}
			add = {
				value = -40
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_hostile_level
							}
						}
					}
					add = -40
				}
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_evil_level
							}
						}
					}
					add = -40
				}
			}
		}
		
		modifier = { #Different faith, pluralism.
			desc = offer_vassalization_interaction_aibehavior_differentfaith_tt
			trigger = {
				scope:recipient = {
					NOT = {
						faith = scope:actor.faith
					}
					NOT = {
						scope:actor.faith = { has_doctrine = doctrine_pluralism_pluralistic }
					}
					faith = { has_doctrine = doctrine_pluralism_pluralistic }
				}
			}
			add = {
				value = -20
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_hostile_level
							}
						}
					}
					add = -20
				}
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_evil_level
							}
						}
					}
					add = -20
				}
			}
		}
		
		modifier = { #Different faith, both have pluralism.
			desc = offer_vassalization_interaction_aibehavior_differentfaith_tt
			trigger = {
				scope:recipient = {
					NOT = {
						faith = scope:actor.faith
					}
					scope:actor.faith = { has_doctrine = doctrine_pluralism_pluralistic }
					faith = { has_doctrine = doctrine_pluralism_pluralistic }
				}
			}
			add = {
				value = -10
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_hostile_level
							}
						}
					}
					add = -10
				}
				if = {
					limit = {
						scope:recipient.faith = {
							faith_hostility_level = {
								target = scope:actor.faith
								value >= faith_evil_level
							}
						}
					}
					add = -10
				}
			}
		}

        modifier = { #Wide difference in rank
			desc = offer_vassalization_interaction_aibehavior_widetitletier_tt
			trigger = {
				scope:actor = {
					tier_difference = {
						target = scope:recipient
						value > 1
					}
				}
			}
			add = 25
		}

        #MINOR

		modifier = { #Friend modifier.
			desc = offer_vassalization_interaction_aibehavior_friend_tt
			trigger = {
				scope:recipient = {
					has_relation_friend = scope:actor
					NOT = { has_relation_best_friend = scope:actor }
				}
			}
			add = 10
		}
		modifier = { #Best Friend modifier.
			desc = offer_vassalization_interaction_aibehavior_best_friend_tt
			trigger = {
				scope:recipient = {
					has_relation_best_friend = scope:actor
				}
			}
			add = 20
		}
		modifier = { #Rivalry modifier.
			desc = offer_vassalization_interaction_aibehavior_rival_tt
			trigger = {
				scope:recipient = {
					has_relation_rival = scope:actor
					NOT = { has_relation_nemesis = scope:actor }
				}
			}
			add = -10
		}
		modifier = { #Nemesis modifier.
			desc = offer_vassalization_interaction_aibehavior_nemesis_tt
			trigger = {
				scope:recipient = {
					has_relation_nemesis = scope:actor
				}
			}
			add = -1000
		}
        
		modifier = { #Same Dynasty modifier.
			desc = offer_vassalization_interaction_aibehavior_dynasty_tt
			trigger = {
				scope:recipient = {
					dynasty = scope:actor.dynasty
				}
			}
			add = 5
		}
		modifier = { #Cultural modifiers.
			add = -10
			desc = offer_vassalization_interaction_aibehavior_culture_tt
			trigger = {
				scope:actor = {
					has_same_culture_group_as = scope:recipient
					NOT = { has_same_culture_as = scope:recipient }
				}
			}
		}
		
		modifier = { #Cultural Group modifiers.
			add = -30
			desc = offer_vassalization_interaction_aibehavior_culture_group_tt
			trigger = {
				scope:actor = {
					NOT = { has_same_culture_group_as = scope:recipient }
				}
			}
		}

        #OPINION INFLUENCE
		modifier = {
			add = 10
			scope:recipient = {
				has_dread_level_towards = {
					target = scope:actor
					level = 1
				}
			}
			desc = INTIMIDATED_REASON
		}
		modifier = {
			add = 20
			scope:recipient = {
				has_dread_level_towards = {
					target = scope:actor
					level = 2
				}
			}
			desc = COWED_REASON
		}
		opinion_modifier = { #Compare Opinion modifier.
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.35
		}
    }

    cost = { gold = appoint_shieldmaiden_cost }

    on_accept = {
        scope:actor = {
            # TODO: roll all of this into an interaction effect to be cleaner

            #send_interface_toast = {
            #    type = event_generic_neutral
            #    title = msg_appointed_shieldmaiden_interaction_title
            #    right_icon = scope:recipient
            #
            #    custom_tooltip = msg_appointed_shieldmaiden_interaction_desc
            #}

            #recognize_shieldmaiden_interaction_effect = yes
            trigger_event = char_interaction.6121
            
            add_prestige = appoint_shieldmaiden_prestige_gain
        }

        scope:recipient = {
            if = {
                add_trait = shieldmaiden

				remove_opinion = {
                    target = scope:actor
                    modifier = relieved_shieldmaiden_opinion
                }

                add_prestige = appoint_shieldmaiden_prestige_gain

                add_opinion = {
                    target = scope:actor
                    modifier = appointed_shieldmaiden_opinion
                }
            }
        }
    }

    on_decline = {
		scope:actor = {
			trigger_event = char_interaction.6122
		}
	}
}
